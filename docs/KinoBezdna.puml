@startuml smart_home_component_diagram
title Система «КиноБездна» - Диаграмма компонентов

top to bottom direction

!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4_Component.puml

Person(Пользователь, "Пользователь", "Взаимодействует через веб-интерфейс")
Person(КонтентМенеджер, "Контент-менеджер", "Взаимодействует через веб-интерфейс для заполнения контента")

System_Boundary(api_app, "Cистема «КиноБездна»") {
    Component(APIGateway, "API Gateway", "Nginx", "Маршрутизация / балансировка запросов / аутентификация")

    Container_Boundary(ВебИнтерфейсПользователя, "Интерфейс пользователя") {
        Component(ВебИнтерфейсМобильный, "Веб-интерфейс мобильный", "HTML / JS / React", "Веб-интерфейс пользователя на мобильном устройстве")
        Component(ВебИнтерфейсНоутбук, "Веб-интерфейс ноутбука", "HTML / JS / React", "Веб-интерфейс пользователя на ноутбуке")
        Component(ВебИнтерфейсСмартТВ, "Веб-интерфейс Смарт ТВ", "HTML / JS / React", "Веб-интерфейс пользователя на Смарт ТВ")

    }
    Container_Boundary(Микрофронты, "Микрофронтенды") {
        Component(МикрофронтОтображенияВидео, "Микрофронт отображения видео", "HTML / JS / React", "Отображение видео / плеер")
        Component(МикрофронтОплаты, "Микрофронт оплаты", "HTML / JS / React", "Оплата подписки")
        Component(МикрофронтМетаданныхФильмов, "Микрофронт метаданных фильмов", "HTML / JS / React", "Отображение подробностей о фильмах")
        Component(МикрофронтПодбораИПоискаФильмов, "Микрофронт подбора и поиска фильмов", "HTML / JS / React", "Отображение списка фильмов / подбор фильмов / рекомендации")
        Component(МикрофронтАвторизации, "Микрофронт авторизации", "HTML / JS / React", "Отображение авторизации / регистрации")
        Component(МикрофронтЛичногоКабинета, "Микрофронт личного кабинета", "HTML / JS / React", "Отображение личного кабинета / папки избранного")

    }
    note top of Микрофронты
    Каждый микрофронт разрабатывается для отображения под все виды устройств
    end note

    Component(ВебИнтерфейсКонтентМенеджера, "Веб-интерфейс контент-менеджера", "HTML / JS / React", "Веб-интерфейс контент-менеджера")


    Container_Boundary(СервисПлатежей, "Сервис платежей") {
        ' Component(APIGatewaySecurity, "API Gateway (маршрутизатор)", "Go", "Маршрутизация запросов")
        ' Component(КонтроллерАутентификации, "Контроллер аутентификации", "Go / JWT", "Проверяет логин/пароль, генерирует токены")
        ' Component(КонтроллерРегистрацииПользователя, "Контроллер регистрации пользователя", "Go", "Создаёт новую учётную запись в системе")
        ' Component(КонтроллерВосстановленияПароля, "Контроллер восстановление пароля", "Go", "Обрабатывает запросы на восстановление пароля")
        ' Component(Security, "Компонент Security", "Go / Crypto", "Обеспечивает шифрование, хранение токенов и безопасные операции")
    }

    Container_Boundary(СервисДоставкиВидео, "Сервис доставки видео") {
        ' Component(APIGatewayDeviceControl, "API Gateway (маршрутизатор)", "Go", "Маршрутизация запросов")
        ' Component(КонтроллерРегистрацииУстройства, "Контроллер регистрация устройства", "Go", "Добавляет устройство в систему после проверки доступности")
        ' Component(КонтроллерИзмененияСостояния, "Контроллер изменения состояния устройства", "Go", "Обновляет параметры устройства (например, целевую температуру)")
        ' Component(КомпонентРегистрацииУстройств, "Компонент регистрации устройств", "Go", "Обеспечивает функционал регистрации и удаления устройств")
        ' Component(КомпонентИзмененияСостоянияУстройства, "Компонент изменения состояния устройств", "Go", "Обеспечивает функционал изменения состояния устройств")
        ' Component(КомпонентИзвлеченияИнформацииОбУстройстве, "Компонент извлечения информации об устройстве", "Go", "Извлекает адрес устройства для отправления команд")
    }

    Container_Boundary(СервисМетаданныхОФильмах, "Сервис метаданных о фильмах") {
        ' Component(APIGatewayDeviceControl, "API Gateway (маршрутизатор)", "Go", "Маршрутизация запросов")
        ' Component(КонтроллерРегистрацииУстройства, "Контроллер регистрация устройства", "Go", "Добавляет устройство в систему после проверки доступности")
        ' Component(КонтроллерИзмененияСостояния, "Контроллер изменения состояния устройства", "Go", "Обновляет параметры устройства (например, целевую температуру)")
        ' Component(КомпонентРегистрацииУстройств, "Компонент регистрации устройств", "Go", "Обеспечивает функционал регистрации и удаления устройств")
        ' Component(КомпонентИзмененияСостоянияУстройства, "Компонент изменения состояния устройств", "Go", "Обеспечивает функционал изменения состояния устройств")
        ' Component(КомпонентИзвлеченияИнформацииОбУстройстве, "Компонент извлечения информации об устройстве", "Go", "Извлекает адрес устройства для отправления команд")
    }

    Container_Boundary(СервисПодписок, "Сервис подписок") {
        ' Component(APIGatewayMonitor, "API Gateway (маршрутизатор)", "Go", "Маршрутизация запросов")
        ' Component(КонтроллерПолученияДанных, "Контроллер получения данных с устройств", "Go", "Обрабатывает текущие показания с зарегистрированных датчиков")
        ' Component(КонтроллерАнализаСостояния, "Контроллер анализа состояния устройств", "Go", "Оценивает работоспособность устройств")
        ' Component(КомпонентАнализаСостоянияУстройств, "Компонент анализа состояния устройств", "Go", "Обеспечивает анализ данных для отображения пользователю")
        ' Component(КомпонентЗаписиДанныхСУстройств, "Компонент записи данных с устройств", "Go", "Сохраняет данные, полученные с устройств")
    }

    Container_Boundary(СервисСкидок, "Сервис скидок") {
    }

    Container_Boundary(СервисАвторизации, "Сервис авторизации") {
    }

    Container_Boundary(СервисРекомендаций, "Сервис рекомендаций") {
    }

    ComponentDb(БазаДанных, "База данных", "PostgreSQL", "Хранение информации о пользователях, устройствах и правах доступа")
}

' System_Ext(EmailСервис, "Email Сервис", "SMTP", "Отправка писем для регистрации и восстановления пароля")
' System_Ext(Устройства, "Физические устройства", "MQTT / HTTPS", "Производят замеры (напр. измеряют температуру) и передают данные на сервер")

Rel(Пользователь, ВебИнтерфейсПользователя, "Использует", "HTTPS")
Rel(КонтентМенеджер, ВебИнтерфейсКонтентМенеджера, "Использует", "HTTPS")

Rel(Микрофронты, APIGateway, "Отправляет запросы", "HTTPS / JSON")

Rel(ВебИнтерфейсПользователя, Микрофронты, "Включает", "")
Rel(ВебИнтерфейсКонтентМенеджера, Микрофронты, "Включает", "")

' Rel(APIGateway, APIGatewaySecurity, "Перенаправляет", "HTTPS")
' Rel(APIGateway, APIGatewayMonitor, "Перенаправляет", "HTTPS")
' Rel(APIGateway, APIGatewayDeviceControl, "Перенаправляет", "HTTPS")

' Rel(APIGatewayDeviceControl, APIGatewaySecurity, "Использует аутентификацию", "HTTPS")
' Rel(APIGatewayMonitor, APIGatewaySecurity, "Использует аутентификацию", "HTTPS")

' Rel(APIGatewaySecurity, КонтроллерАутентификации, "Перенаправляет")
' Rel(APIGatewaySecurity, КонтроллерРегистрацииПользователя, "Перенаправляет")
' Rel(APIGatewaySecurity, КонтроллерВосстановленияПароля, "Перенаправляет")

' Rel(APIGatewayDeviceControl, КонтроллерРегистрацииУстройства, "Перенаправляет")
' Rel(APIGatewayDeviceControl, КонтроллерИзмененияСостояния, "Перенаправляет")

' Rel(APIGatewayMonitor, КонтроллерПолученияДанных, "Перенаправляет")
' Rel(APIGatewayMonitor, КонтроллерАнализаСостояния, "Перенаправляет")

' Rel(КонтроллерАутентификации, Security, "Использует")
' Rel(КонтроллерРегистрацииПользователя, Security, "Использует")
' Rel(КонтроллерВосстановленияПароля, Security, "Использует")
' Rel(Security, БазаДанных, "Чтение и запись", "SQL")

' Rel(КонтроллерРегистрацииУстройства, КомпонентРегистрацииУстройств, "Использует")
' Rel(КомпонентРегистрацииУстройств, БазаДанных, "Запись", "SQL")
' Rel(КонтроллерИзмененияСостояния, КомпонентИзвлеченияИнформацииОбУстройстве, "Использует для чтения информации об устройстве")
' Rel(КомпонентИзвлеченияИнформацииОбУстройстве, БазаДанных, "Чтение", "SQL")
' Rel(КонтроллерИзмененияСостояния, КомпонентИзмененияСостоянияУстройства, "Использует")
' Rel(КомпонентИзмененияСостоянияУстройства, БазаДанных, "Запись обработки команд", "SQL")

' Rel(КонтроллерПолученияДанных, КомпонентЗаписиДанныхСУстройств, "Использует")
' Rel(КомпонентЗаписиДанныхСУстройств, БазаДанных, "Запись", "SQL")
' Rel(КонтроллерАнализаСостояния, КомпонентАнализаСостоянияУстройств, "Использует")
' Rel(КомпонентАнализаСостоянияУстройств, БазаДанных, "Чтение", "SQL")

' Rel(КонтроллерРегистрацииПользователя, EmailСервис, "Отправка email", "SMTP / HTTPS")
' Rel(КонтроллерВосстановленияПароля, EmailСервис, "Отправка email", "SMTP / HTTPS")

' Rel(КомпонентИзмененияСостоянияУстройства, Устройства, "Отправляет команды", "MQTT / HTTPS")
' Rel(Устройства, APIGateway, "Отправляет данные в контроллер получения данных с устройств", "MQTT / HTTPS")

' Rel(Пользователь, Устройства, "Устанавливает и настраивает", "Ручное взаимодействие")
@enduml